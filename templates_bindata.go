// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5d\xcb\xd3\x30\x14\x80\xef\xfb\x2b\x42\xae\xbb\x98\x55\x87\x8a\xcb\xc0\x0b\x85\x81\x6e\xa2\xbb\xf2\x03\x49\x9b\xb3\x36\x9a\x25\x25\x39\x63\x60\xe8\x7f\x97\xb6\x1b\x4d\xe7\xf0\xed\x45\x39\x3c\xe7\x23\x4f\x4f\x13\xe3\x82\x28\x38\x6a\x0b\x84\x2a\x87\x94\x2c\xba\x2e\xab\xbd\x6c\x1b\x12\x33\x42\x08\x19\xe3\x6f\x43\xdc\x3f\x7d\x83\x3e\x12\x76\xd0\x68\x60\x7c\xbf\x45\xf4\xba\x3c\x23\x04\x66\x64\x09\x66\x98\x71\xab\x1f\x88\x58\xaf\xdf\xef\x77\x07\xf2\x69\xbf\xdd\x1d\x16\x5f\xb6\x5f\xdf\x09\x5a\x70\xba\x89\xf1\x7f\x73\xba\x6e\xfd\xac\x6f\xdb\x6c\xf2\xf9\xb8\x5f\xe7\x80\xc2\xdc\x41\xe3\x2a\x81\xf9\xcc\x13\xac\x9a\xb9\x58\xa7\x20\x40\x2b\x38\x5b\x4d\x85\x5e\xda\xdf\xff\xc0\x56\x2a\x41\x39\x2b\x72\xce\x0a\x3a\xe1\x93\xf4\xb5\xb6\x7d\x86\x27\xb4\x02\x5b\x81\x45\x2f\x11\x04\xfa\x33\x4c\x99\xd0\x1a\x6d\x21\x08\x3a\x06\x74\x7e\xaa\xd2\x5e\x7c\xf8\x3c\xa0\x1f\x6f\xb2\x9b\x60\xb2\xeb\x71\x77\xf4\xfb\x2e\x69\x3c\x3a\x8b\x41\xff\x01\xb1\x7c\xf1\xd0\xeb\x65\xce\x19\x5f\x25\x0d\x2d\xd8\x8b\x56\xd8\x88\x25\xe3\x89\x59\x23\x5b\x10\x1f\x3d\x54\xce\xab\x54\x01\x54\x9d\x2a\xf4\x8e\xa5\xc3\xe6\x91\x40\x31\x41\xe9\xbd\xbb\x0c\x94\xb3\xd7\x4f\x9d\x3d\x7c\x96\xb4\xb5\x01\xf1\xbc\xb8\xc3\x4a\x07\x94\xb6\x02\xb1\x64\xaf\x52\xad\x18\x11\x4e\xad\x91\x38\xde\xd3\x9f\x1e\x8c\x44\xed\x6c\xa0\x84\x5d\xff\xf0\x7d\x09\xca\xd2\xc0\x35\xdf\x65\x31\x82\x55\x5d\xf7\x37\x00\x00\xff\xff\xec\x09\x89\xb9\xf0\x02\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 752, mode: os.FileMode(436), modTime: time.Unix(1571059917, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x6f, 0x6d, 0x33, 0xa, 0x4f, 0x57, 0xe4, 0x65, 0xb4, 0xbb, 0xf4, 0xd9, 0xc1, 0x34, 0x16, 0xdc, 0x69, 0x7d, 0x32, 0x9, 0x7d, 0x46, 0xe9, 0x11, 0x7b, 0x46, 0x5a, 0x90, 0xd3, 0x7e, 0x63}}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x4f\x4b\x33\x31\x10\x87\xef\xfb\x29\x86\x9c\xda\xf7\xed\xae\xdd\xb3\xfd\x83\x08\x82\x22\x15\x6a\x6f\x52\x24\x75\xa7\xdb\x40\x4c\x30\x19\x2d\x25\xe4\xbb\x4b\xd6\x75\x6b\x9b\x6d\x71\xbd\x0d\xc3\xf4\xf9\xa5\xf3\xec\x38\x57\xe0\x5a\x28\x04\x56\x68\x7a\x36\x28\x39\x09\xad\x2c\xf3\x3e\x71\xce\x70\x55\x22\x64\xf3\xef\xae\xf7\x09\x80\x73\xd9\x3d\xae\x69\xc1\x57\x12\x67\xfc\x15\xbd\x87\x34\x0d\xdd\xb9\x28\x37\x07\xed\xa7\x04\x20\xcc\xa7\x20\xd6\xd0\xc3\x37\xf8\x1a\xb9\xe6\xa6\x10\x8a\x4b\x41\x3b\x60\xff\x58\x1f\xd2\x8a\x0b\xc0\x8d\xd1\xdb\x0d\xf2\x62\xac\x5f\x8c\xde\x0e\x42\x29\xf9\x0a\xe5\x78\x34\xba\x79\x98\x2d\x26\xc3\x2c\x9b\x8d\x2e\xaa\x72\x32\x68\xe0\x28\x2d\x9e\x49\xf8\xcf\xfa\xed\x7c\x42\x8c\x23\xf2\xbf\x44\x4c\x3b\x45\xb8\xe1\x20\xf7\x27\x32\xe2\x55\x28\xad\x50\xb7\x73\x5c\xf4\x14\xdf\xc6\x55\x45\x83\xad\x5d\x34\x46\xaf\x88\x8c\x58\xbd\x13\xda\xac\x42\x37\x83\x51\xd0\x89\x1f\xfc\x32\xb0\xda\x5b\xf8\x6a\xce\xbb\x27\x2e\x64\xed\x3e\x94\x27\xdd\xb7\x7b\x89\xf8\x47\xe6\xf7\xf4\xb0\xce\x28\x20\xef\x1e\x30\xed\x14\x70\xe0\xfd\x8c\xf6\x0a\xd3\x68\x8f\x31\xee\xf8\x21\xbe\x85\xda\x38\x58\x5e\x26\x3f\x1b\xce\x85\xbf\x53\x12\xf4\x24\x2a\xc8\x6e\xad\xae\x6f\xbb\x0f\x39\xd4\xf7\x0d\x8f\x64\x84\x2a\xed\x9d\x16\x07\x23\xc0\xc2\xa5\xb3\x70\xd9\x96\x76\x12\xc7\x42\x7d\x08\xbb\x3c\xe2\xef\xeb\xcf\x00\x00\x00\xff\xff\x72\x2f\x28\xd9\x5c\x04\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 1116, mode: os.FileMode(436), modTime: time.Unix(1612432261, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xa9, 0xdd, 0x7c, 0xd2, 0x28, 0xd5, 0x41, 0x2a, 0xd9, 0x29, 0x8c, 0xb3, 0xe5, 0xe8, 0xf7, 0x65, 0xca, 0x26, 0x9d, 0x1b, 0xcc, 0xe5, 0xc0, 0x70, 0xa4, 0x4f, 0xf9, 0xf4, 0xf6, 0x78, 0xd2}}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\x5d\x8f\x93\x40\x14\x7d\xef\xaf\xb8\xb9\xd9\xf8\xd4\x96\xae\x56\x1f\x5c\x86\x84\xaf\xee\x92\x20\x34\xec\x44\x13\x8d\x31\x50\xa6\x0d\x71\x16\x0c\xcc\x9a\x6c\x46\xfe\xbb\x61\x3a\x60\x41\xfc\x8a\x7d\x29\xf7\x70\x3f\x0e\xe7\x1c\x29\x73\x76\x2c\x4a\x06\x98\x57\xe2\x93\x48\x33\xce\x1a\x6c\xdb\x85\x94\x75\x5a\x9e\x18\x5c\x89\xcf\x4b\xb8\x12\xf0\x9a\xc0\x9a\xaa\xb7\x6d\xbb\x00\x90\x72\x1d\xa5\x0f\xac\x6d\xe1\x03\x4f\x33\xc6\x89\x69\x52\xdb\x09\xfd\x05\xa8\x9f\x13\x27\x9e\x9f\x10\xdc\xa0\x06\x5c\x3f\x0c\xf7\xb6\xe7\x05\xd1\xed\x04\xbd\xdf\xdb\xee\x19\x5d\xbf\xec\xf1\x77\x81\x47\xef\x08\x5e\xbf\xd8\xf6\x88\x1d\x06\xb7\x11\x41\xd7\x8f\xa8\x9f\xf4\xa0\xa5\xff\x4d\x9a\xf4\x8f\x5d\xe1\x4d\xba\xe1\xad\xae\x9d\x98\xd2\xf8\x0d\x5e\xae\xff\x31\x07\x60\xee\xe2\x88\xc2\x3e\x0e\x22\xba\xba\x0f\xde\xfb\x04\xaf\xb7\x08\x3b\xdb\xf5\x09\xde\x31\xfe\x95\x89\xe2\x90\x42\x56\xf1\x1c\x2d\xd3\xb1\xa4\x5c\xd3\x42\x70\xd6\xb6\xa6\xe1\x58\xa6\xd1\x4d\x5f\xae\x93\x72\x05\xc5\x51\xab\x66\x0b\x51\x17\xd9\xa3\x60\xcd\x5a\xe9\x05\x2b\x25\xe3\xf4\xf8\xf9\x98\x5d\x17\x29\x87\x40\xa4\xbc\x38\xe0\x98\xd0\x06\xc1\x8d\xc3\x38\x21\x78\xaa\xd9\xd3\xab\x0d\x5a\xcf\xca\xac\xf9\x72\xd3\x91\x99\xbb\xd3\x91\x9b\x23\xc6\xca\x7c\x44\xc1\x34\xa8\x37\xc8\x69\xf4\x7a\x9a\x86\x32\xf5\x5c\xf4\xdf\xe3\x56\xfc\xf1\xa1\x6c\x86\xf1\x6f\xe7\xd6\xdf\xda\xaf\x0d\x08\xfd\x1d\xfd\x87\x44\x6c\x67\xf2\xd0\x93\xec\xd8\xe8\x84\x76\x01\x3d\xa8\x80\x6a\x6a\xc3\x77\xfd\x2a\x18\x8a\x87\x35\xe3\xf7\x73\x1c\xd9\x3a\x56\x6e\x2c\xc0\x1f\x1c\xfd\x7f\x3f\xe7\xcf\xcc\xd3\xfa\x3b\x3b\x87\x5e\xdd\xf9\x93\xbd\x7a\xcd\xd8\xef\x69\xae\xb2\xd3\xa1\xe2\x55\xad\x77\x2c\x8f\x05\xe7\x0a\x20\x38\x13\xc2\xa1\x19\x97\xaa\xbd\x11\x4f\x9c\x91\x6e\x86\xe5\xd3\xb3\xaa\xfe\x78\xb3\xb8\x84\x2e\x9f\xbf\x07\x00\x00\xff\xff\x3c\x8a\xab\x86\xab\x04\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 1195, mode: os.FileMode(436), modTime: time.Unix(1612404317, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0xfb, 0x63, 0x46, 0x83, 0x6b, 0x2c, 0xfe, 0x10, 0x5, 0xa0, 0xcc, 0xe2, 0x41, 0xe7, 0xcc, 0x43, 0x75, 0xcd, 0xeb, 0x89, 0xd3, 0x5e, 0x1, 0xdc, 0xd8, 0xe0, 0x4b, 0x60, 0x74, 0x3c, 0xc4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,

	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,

	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl":           &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl":    &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
