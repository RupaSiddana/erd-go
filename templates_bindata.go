// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/dot.tmpl (752B)
// templates/dot_relations.tmpl (1.02kB)
// templates/dot_tables.tmpl (1.001kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5d\xcb\xd3\x30\x14\x80\xef\xfb\x2b\x42\xae\xbb\x98\x55\x87\x8a\xcb\xc0\x0b\x85\x81\x6e\xa2\xbb\xf2\x03\x49\x9b\xb3\x36\x9a\x25\x25\x39\x63\x60\xe8\x7f\x97\xb6\x1b\x4d\xe7\xf0\xed\x45\x39\x3c\xe7\x23\x4f\x4f\x13\xe3\x82\x28\x38\x6a\x0b\x84\x2a\x87\x94\x2c\xba\x2e\xab\xbd\x6c\x1b\x12\x33\x42\x08\x19\xe3\x6f\x43\xdc\x3f\x7d\x83\x3e\x12\x76\xd0\x68\x60\x7c\xbf\x45\xf4\xba\x3c\x23\x04\x66\x64\x09\x66\x98\x71\xab\x1f\x88\x58\xaf\xdf\xef\x77\x07\xf2\x69\xbf\xdd\x1d\x16\x5f\xb6\x5f\xdf\x09\x5a\x70\xba\x89\xf1\x7f\x73\xba\x6e\xfd\xac\x6f\xdb\x6c\xf2\xf9\xb8\x5f\xe7\x80\xc2\xdc\x41\xe3\x2a\x81\xf9\xcc\x13\xac\x9a\xb9\x58\xa7\x20\x40\x2b\x38\x5b\x4d\x85\x5e\xda\xdf\xff\xc0\x56\x2a\x41\x39\x2b\x72\xce\x0a\x3a\xe1\x93\xf4\xb5\xb6\x7d\x86\x27\xb4\x02\x5b\x81\x45\x2f\x11\x04\xfa\x33\x4c\x99\xd0\x1a\x6d\x21\x08\x3a\x06\x74\x7e\xaa\xd2\x5e\x7c\xf8\x3c\xa0\x1f\x6f\xb2\x9b\x60\xb2\xeb\x71\x77\xf4\xfb\x2e\x69\x3c\x3a\x8b\x41\xff\x01\xb1\x7c\xf1\xd0\xeb\x65\xce\x19\x5f\x25\x0d\x2d\xd8\x8b\x56\xd8\x88\x25\xe3\x89\x59\x23\x5b\x10\x1f\x3d\x54\xce\xab\x54\x01\x54\x9d\x2a\xf4\x8e\xa5\xc3\xe6\x91\x40\x31\x41\xe9\xbd\xbb\x0c\x94\xb3\xd7\x4f\x9d\x3d\x7c\x96\xb4\xb5\x01\xf1\xbc\xb8\xc3\x4a\x07\x94\xb6\x02\xb1\x64\xaf\x52\xad\x18\x11\x4e\xad\x91\x38\xde\xd3\x9f\x1e\x8c\x44\xed\x6c\xa0\x84\x5d\xff\xf0\x7d\x09\xca\xd2\xc0\x35\xdf\x65\x31\x82\x55\x5d\xf7\x37\x00\x00\xff\xff\xec\x09\x89\xb9\xf0\x02\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 752, mode: os.FileMode(0664), modTime: time.Unix(1595332708, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x6f, 0x6d, 0x33, 0xa, 0x4f, 0x57, 0xe4, 0x65, 0xb4, 0xbb, 0xf4, 0xd9, 0xc1, 0x34, 0x16, 0xdc, 0x69, 0x7d, 0x32, 0x9, 0x7d, 0x46, 0xe9, 0x11, 0x7b, 0x46, 0x5a, 0x90, 0xd3, 0x7e, 0x63}}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x4b\xc3\x30\x14\x80\xef\xfd\x15\x8f\x9e\x9c\xb6\x75\x3d\xdb\x6d\x88\xe0\x49\x2a\x8c\xdd\x44\xe4\xd5\xbe\x6e\x81\x98\x60\x1a\x19\x12\xf2\xdf\x25\x75\xc6\x6d\x69\x8b\xf5\xf6\x78\xa4\xdf\x17\xf2\xd5\x98\x9a\x1a\x26\x08\xe2\x5a\xea\x17\x45\x1c\x35\x93\xa2\x8d\xad\x8d\x8c\x51\x28\xb6\x04\xd9\xfa\x67\x6b\x6d\x04\x60\x4c\xf6\x40\x8d\xde\x60\xc5\xa9\xc4\x37\xb2\x16\xd2\xd4\x6d\xd7\x6c\xbb\x3b\x59\x3f\x45\x00\xee\x7c\x0a\xac\x81\x0b\x7a\x87\xef\x23\x77\xa8\x6a\x26\x90\x33\xfd\x09\xf1\x65\x3c\x83\xb4\xe3\x02\xa0\x52\x72\xbf\x23\xac\x17\xf2\x55\xc9\x7d\xe2\x46\x8e\x15\xf1\x45\x51\xdc\x3f\x96\x9b\xe5\x3c\xcb\xca\xe2\xba\x1b\x97\x89\x87\x13\x6f\x69\xc4\x70\x15\xcf\xfa\xf9\x9a\x28\x54\xe4\xff\x51\xac\x26\x29\xcc\x3c\xc9\xed\x80\x23\x7c\x0a\x21\x05\xc9\x7e\x8e\x09\xae\x62\xfb\xb8\xa2\xf6\xd8\x43\x0b\x5f\xf4\x56\x6b\xc5\xaa\x0f\x4d\x6d\xd6\xa1\xfd\xc1\x40\x34\xf0\xc1\x1f\x85\xdd\xbb\xb9\xbf\x66\xbc\xbd\x46\xc6\x0f\xed\xdd\x38\xd8\xbe\xbf\x4b\xc0\x3f\x2b\xff\x4b\x77\xcf\x19\x08\xf2\xe9\x82\xd5\x24\xc1\x49\xf7\x91\xec\x1d\xc6\x67\x0f\x31\xe6\xfc\x22\xb6\x87\xea\x1b\x3c\xdf\x44\xc7\x8b\xe3\xf9\x2b\x00\x00\xff\xff\xac\x06\x1a\x24\xfc\x03\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 1020, mode: os.FileMode(0664), modTime: time.Unix(1612205732, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0x48, 0xa3, 0xa7, 0x23, 0xda, 0x22, 0x95, 0x1c, 0xdf, 0xc3, 0x2e, 0x9e, 0xa, 0x70, 0xfd, 0x51, 0xfb, 0x2c, 0xc6, 0x32, 0xd0, 0x5b, 0x12, 0x21, 0x2a, 0x47, 0x89, 0x1d, 0x61, 0x15, 0x25}}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x5f\x8b\x9b\x40\x14\xc5\xdf\xf3\x29\x2e\x97\xa5\x4f\x89\x66\xdb\xb4\x0f\xdd\x19\xc1\x7f\xd9\x15\xac\x06\x77\x68\xa1\xa5\x14\x8d\x93\x20\x9d\x6a\xd1\xd9\xc2\x32\xf5\xbb\x17\x27\x63\x1a\xd3\xa4\xb0\x79\xc9\xdc\x93\x3b\xf7\x9e\xfc\x8e\x2a\x55\xf2\x5d\x55\x73\xc0\xb2\x91\xdf\x64\x5e\x08\xde\x61\xdf\xcf\x94\x6a\xf3\x7a\xcf\xe1\x46\x7e\x9f\xc3\x8d\x84\xf7\x14\x2c\xa6\x7f\xed\xfb\x19\x80\x52\x16\xab\xa4\xe0\x7d\x0f\x5f\x44\x5e\x70\x41\x09\x61\xae\x17\x87\x33\xd0\x1f\x2f\xcd\x82\x30\xa3\xb8\x44\x23\xf8\x61\x1c\x6f\xdc\x20\x88\x92\xfb\x33\xf5\x71\xe3\xfa\x07\xd5\x7a\x3b\xea\x9f\xa2\x80\x3d\x50\xbc\x7d\xb3\x1a\x15\x37\x8e\xee\x13\x8a\x7e\x98\xb0\x30\x1b\x45\xc7\x7c\x13\x96\x8d\xc7\xa1\x08\xce\xba\xe1\xa3\xa9\xbd\x94\xb1\xf4\x03\x9e\x8e\x77\xc8\x3a\x4d\x18\x6c\xd2\x28\x61\x8b\xc7\xe8\x73\x48\xf1\x76\x85\xb0\x76\xfd\x90\xe2\x03\x17\xbf\xb8\xac\xb6\x39\x14\x8d\x28\xd1\x21\x9e\xf3\xf7\x8f\x13\xdb\x73\x88\x3d\xdc\x76\x88\xcd\x82\xa3\x17\x7b\x34\x43\x6c\x4d\xe4\x50\x28\xb5\x80\x6a\x07\x96\xdf\x88\xa7\x1f\x75\x07\x0b\x8d\x11\xe0\xf7\xa1\xf5\xbf\xec\x8c\xfb\x38\x5c\xb3\x17\xe0\x5c\x5d\x80\x39\x9a\x1c\xdc\x98\x7c\x87\x78\xb7\x3a\x5e\x63\xcd\x18\xbb\x4e\x55\xfb\xb8\xc4\xed\x35\x4e\xf0\x68\x34\xc7\x01\x53\x00\xae\x94\x6d\x55\x3c\x49\xde\x59\xfa\xf1\x39\xf2\x30\xdb\xf4\xf0\x43\x08\x6e\x5b\xe5\x02\x22\x99\x8b\x6a\x8b\xd3\x85\x4b\x04\x3f\x8d\xd3\x8c\xe2\xbe\xe5\xcf\xef\x96\xe8\xbc\xaa\x8b\xee\xe7\x9d\x52\x57\xd6\x5c\xb6\xc5\xeb\x72\xb2\xff\x72\x9c\xc7\x5e\xd3\xf9\x4f\xbc\x66\xcc\x34\x6f\xfd\xce\x9c\xd8\x28\xf6\xdb\x46\x34\xad\x99\x31\xdf\x55\x42\x68\x81\xe2\x80\xee\x5a\x33\xce\x75\x7b\x27\x9f\x05\xa7\xc3\x1d\x5e\x9e\xaf\xd5\xf5\xd7\xbb\xd9\xa9\x74\x7a\xfe\x13\x00\x00\xff\xff\xa8\x98\x28\xae\xe9\x03\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 1001, mode: os.FileMode(0664), modTime: time.Unix(1595332708, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x48, 0x1e, 0x19, 0x73, 0x71, 0x38, 0x82, 0xb7, 0x10, 0xf8, 0xe4, 0xa5, 0xd0, 0xef, 0x15, 0x3d, 0xc8, 0x92, 0xe6, 0x8e, 0x8, 0xe9, 0x3e, 0x74, 0xf3, 0xb8, 0x46, 0x8f, 0x5b, 0x31, 0xa3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl":           templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl":    templatesDot_tablesTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"dot.tmpl": {templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": {templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": {templatesDot_tablesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
